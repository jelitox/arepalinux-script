#!/bin/bash
# 98-update-filesystems
#
# optimice filesystem access
#

info " Update and optimize filesystems "

# hacer una copia de seguridad del fstab
if [ ! -f "/etc/fstab.orig" ]; then
    cp -p /etc/fstab /etc/fstab.orig
fi

# getting boot line
p_boot=$(cat /etc/fstab.orig | grep -E "\/boot " | grep -v "^#" | awk '{ print $1}')
# getting root line
p_root=$(cat /proc/cmdline | grep -no 'root=[^"]*' | grep -Po 'UUID=[^"]*' | awk '{ print $1}')

# first: optimize EXT4 filesystem flags
awk -v f="$EXT4_FLAGS" '/ ext4 /{$4=f}{print}' /etc/fstab.orig > /etc/fstab.bak
cp -p /etc/fstab.bak /etc/fstab

# second: optimize XFS flags:
awk -v f="$XFS_FLAGS" '/ xfs /{$4=f}{print}' /etc/fstab.bak > /etc/fstab.bak2
mv /etc/fstab.bak2 /etc/fstab.bak

# optimizing only boot flags:
awk -v f="$EXT4_FLAGS,$BOOT_FLAGS" -v pattern="$p_boot" '$1 ~ pattern {$4=f}{ print }' /etc/fstab.bak > /etc/fstab.bak2
mv /etc/fstab.bak2 /etc/fstab.bak

# optimizing only root flags:
awk -v f="$EXT4_FLAGS,$ROOT_FLAGS" -v pattern="$p_root" '$1 ~ pattern {$4=f}{ print }' /etc/fstab.bak > /etc/fstab.bak2
mv /etc/fstab.bak2 /etc/fstab.bak

# umount and check boot
fs_boot=$(blkid -U $(echo $p_boot | cut -d '=' -f 2))

# umount recursively
grep "/boot" /proc/mounts | cut -f2 -d" " | sort -r | xargs umount -f

# checking /boot
e2fsck -f $fs_boot
# convert to ext4
tune2fs -O extents,uninit_bg,dir_index $fs_boot
# disable journal
tune2fs -O ^has_journal $fs_boot
# last check
e2fsck -fDC0 $fs_boot

cp -p /etc/fstab.bak /etc/fstab

# remount
mount -a

# force checking filesystem on reboot
touch /forcefsck
sed -ie 's/^[#]FSCKFIX=no$/FSCKFIX=yes/' /etc/default/rcS

WARN=$(cat << _MSG
 ---------- [ Checking Filesystem ] ---------------

  root and boot filesystem will be checked on
  next reboot.
  
  Remove file /forcefsck to cancel.
  
 ------------------------------------------------
_MSG
)
echo "$WARN"
